<div class="container">

    <div class="row">
        <div class="box">
            
  <div id="scheduler_here" class="dhx_cal_container" style='width:100%; height:800px;z-index:1'>
    <div class="dhx_cal_navline">
      <div class="dhx_cal_prev_button">&nbsp;</div>
      <div class="dhx_cal_next_button">&nbsp;</div>
      <div class="dhx_cal_today_button"></div>
      <div class="dhx_cal_date"></div>
      <div class="dhx_cal_tab" name="day_tab" style="right:204px;"></div>
      <div class="dhx_cal_tab" name="week_tab" style="right:140px;"></div>
      <div class="dhx_cal_tab" name="month_tab" style="right:76px;"></div>
    </div>
    <div class="dhx_cal_header">
    </div>
    <div class="dhx_cal_data">
    </div>
  </div>
        </div>
    </div>
    <div id="menuData" style="display: none;">
            <div id="menu_cb_copy" text="Copy" ></div>
            <div id="menu_cb_cut" text="Cut" ></div>
            <div id="menu_cb_paste" text="Paste" ></div>
            <div id="manu_sep_3" type="separator"></div>
            <div id="menu_cb_delete" text="Delete" ></div>
    </div>
      

</div>
<script>

 this._show_tooltips = true;
(function(){
    var events = ["onEmptyClick", "onViewChange", "onLightbox", "onBeforeEventDelete", "onBeforeDrag"];
    var hiding_function = function(){
        this._show_tooltips = true;
        return true;
    }.bind(this);
    for (var i=0; i<events.length; i++)
        scheduler.attachEvent(events[i], hiding_function);
})();
  scheduler.config.xml_date="%Y-%m-%d %H:%i";
  // scheduler.form_blocks["my_editor"] = {
  //               render:function(sns) {
  //                   return "<div class='dhx_cal_ltext' style='height:60px;'><input type='text'></div>";
  //               },
  //               set_value:function(node, value, ev) {
  //                   node.childNodes[0].value = value || "";
  //               },
  //               get_value:function(node, ev) {
                    
  //                   return node.childNodes[0].value;
  //               },
  //               focus:function(node) {
  //                   var a = node.childNodes[0];
  //                   a.select();
  //                   a.focus();
  //               }
  //           };

var opts = [
    { key: 1, label: '1' },
    { key: 2, label: '2' },
    { key: 3, label: '3' },
    { key: 4, label: '4' },
    { key: 5, label: '5' },
    { key: 6, label: '6' },
    { key: 7, label: '7' },
    { key: 8, label: '8' },
    { key: 9, label: '9' },
    { key: 10, label: '10' },
    { key: 11, label: '11' },
    { key: 12, label: '12' },
    { key: 13, label: '13' },
    { key: 14, label: '14' },
    { key: 15, label: '15' },
    { key: 16, label: '16' },
    { key: 17, label: '17' },
    { key: 18, label: '18' },
    { key: 19, label: '19' },
    { key: 20, label: '20' },
   
];
    scheduler.config.lightbox.sections = [
    {name:"description", map_to:"text", type:"textarea" , focus:true},
    {name:"Type", map_to:"event_type", type:"select",options:scheduler.serverList("type")},
    {name:"Max users", map_to:"max_users", type:"select", options:opts},
    {name:"recurring", type:"recurring", map_to:"rec_type", button:"recurring"},
    {name:"time", height:72, type:"time", map_to:"auto"}
    ];
    scheduler.templates.quick_info_title = function(start, end, ev){ return ev.event_type.substr(0,50); };
    scheduler.attachEvent("onTemplatesReady", function(){
    scheduler.templates.event_text=function(start,end,event){
        return "<div class='center'>" + (event.event_type  !== undefined ? event.event_type.toUpperCase().replace("_"," ") : "") + "<br> ("+ (event.users  !== undefined ? (event.users + "/" + event.max_users) : "") + ")</div> ";
    }
}); 
     scheduler.config.details_on_dblclick = true;
     
    
    var csrf_token = $('meta[name=csrf-token]').attr('content');
    scheduler.config.first_hour = 8;
    scheduler.config.last_hour = 22;
    scheduler.config.hour_size_px = 50;
    scheduler.config.separate_short_events = true;
    var format=scheduler.date.date_to_str("%Y-%m-%d %H:%i");
    scheduler.templates.tooltip_text = function(start,end,event) {
        if (this._show_tooltips === true)
    return "<b>"+event.event_type.toUpperCase().replace("_"," ") +":</b><br>"+event.text+"<br/><b>Start date:</b> "+
    format(start)+"<br/><b>End date:</b> "+format(end);
    else 
        return ""
}.bind(this);
     <% if current_user.try(:admin?) %>
        scheduler.attachEvent("onClick", function(id) {  
            this._show_tooltips = false;
            dhtmlXTooltip.hide();
        }.bind(this));
     scheduler.config.icons_select = ["icon_details", "icon_delete", "icon_copy_event"];
     scheduler.locale.labels.icon_copy_event = "Copy"
     scheduler._click.buttons.copy_event = function(id){
        cb_isCopy = true;
        scheduler.hideQuickInfo(true);
        scheduler.callEvent("onEventCopied", [scheduler.getEvent(id)]);  
     }
     var menu = new dhtmlXMenuObject();
        // menu.setIconsPath("../assets/img/font-awesome/");
        menu.renderAsContextMenu();
       menu.loadFromHTML("menuData", true);
        var event_id, cb_date, cb_isCopy, cb_section = null;

        menu.attachEvent("onClick", function(id) {
           eval(id)();
        });

        scheduler.attachEvent("onContextMenu", function(event_id_loc, native_event_object) {
           dhtmlXTooltip.hide();
           event_id = event_id_loc;
           cb_date = scheduler.getActionData(native_event_object).date;
           cb_section = scheduler.getActionData(native_event_object).section;
           /* Menu position */
           var posx = 0;
           var posy = 0;
           if (native_event_object.pageX || native_event_object.pageY) {
              posx = native_event_object.pageX;
              posy = native_event_object.pageY;
           } else if (native_event_object.clientX || native_event_object.clientY) {
              posx = native_event_object.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
              posy = native_event_object.clientY + document.body.scrollTop + document.documentElement.scrollTop;
           }

           /* Menu items */
           if (event_id) {
              menu.showItem("menu_cb_copy");
              menu.showItem("menu_cb_cut");
              menu.hideItem("menu_cb_paste");
              menu.showItem("manu_sep_3");
              menu.showItem("menu_cb_delete");
              menu.showContextMenu(posx, posy);
           }
           else {
              menu.hideItem("menu_cb_copy");
              menu.hideItem("menu_cb_cut");
              menu.hideItem("menu_cb_delete");
              menu.hideItem("manu_sep_3");
              menu.showItem("menu_cb_paste");
              menu.showContextMenu(posx, posy);
           }
           return false; // prevent default action and propagation
        });

        function menu_cb_copy() {
           scheduler._buffer_id = event_id;
           cb_isCopy = true;
           scheduler.callEvent("onEventCopied", [scheduler.getEvent(event_id)]);  
        }
        function menu_cb_cut() {
           scheduler._buffer_id = event_id;
           cb_isCopy = false;
           scheduler.callEvent("onEventCut", [scheduler.getEvent(event_id)]);  
        }
         function menu_cb_delete() {
           scheduler._buffer_id = event_id;
           scheduler.deleteEvent(event_id);  
        }
        function menu_cb_paste() {
           var ev = scheduler.getEvent(scheduler._buffer_id);
           if (ev) {
              if (cb_isCopy) { // copy-paste
                 new_ev = _cb_make_paste_event(ev);
                 new_ev.id = scheduler.uid();
                 
                 scheduler.addEvent(new_ev);
                 scheduler.callEvent("onEventPasted", [cb_isCopy, new_ev, ev]);
              } else { // cut-paste
                 new_ev = _cb_make_paste_event(ev);

                 var a = scheduler.callEvent("onBeforeEventChanged", [new_ev, null, !1, ev]);
                 a && (scheduler.addEvent(new_ev), scheduler.callEvent("onEventPasted", [cb_isCopy, new_ev, ev]));
              }
           }
        }
        function _cb_make_paste_event(ev) {
           var event_duration = ev.end_date-ev.start_date;
           var new_ev = scheduler._lame_copy({}, ev);
           new_ev.start_date = new Date(cb_date);
           new_ev.end_date = new Date(new_ev.start_date.valueOf() + event_duration);
           new_ev.event_type = ev.event_type;
           new_ev.max_users = ev.max_users;
           if (cb_section) {
              var a = scheduler.getState().mode, d = null;
              scheduler.matrix[a] ? d = scheduler.matrix[a].y_property : scheduler._props[a] && (d = scheduler._props[a].property), new_ev[d] = cb_section;
           }
           
           return new_ev;
        }
    var dp = new dataProcessor("<%= db_action_path %>");
    dp.attachEvent("onBeforeUpdate", function(id, state, data){
    //add auth token
     if (data.rec_type === null)
        data.rec_type = "";
     data["authenticity_token"] = csrf_token;
     return true;
    });
    dp.attachEvent("onAfterUpdate", function(){
      scheduler.load("<%= data_path %>", "json");
    });


    dp.init(scheduler);
    dp.setTransactionMode("POST", false);
   // scheduler.config.readonly_form = true;
   //  scheduler.config.readonly = true; 
    <% else %>
    scheduler.locale.labels.icon_cancel_event = "Can't go"
    scheduler.locale.labels.icon_reserve_event = "Going"
    // scheduler.templates.event_class = function(start, end, ev){
    //  class_name = ""
    //  if (ev.past){
    //     class_name = "past"
    //  }
    //  return class_name;
    // }
    scheduler._click.buttons.cancel_event = function(id){
       dhtmlx.message({
        title: "Cancel",
        type: "confirm-warning",
        text: "Are you sure that you want to cancel this event?",
        callback: function() {
            jQuery.ajax({
        type: "POST",
        dataType: 'json',
        data: "authenticity_token=" + csrf_token,
        url:  "../events/"+id+"/cancel_event",
        success: function(data) {
          scheduler.hideQuickInfo(true);
          scheduler.load("<%= data_path %>", "json");
        }.bind(this),
        error: function() {
            alert(error);
        }.bind(this),
        timeout: 30000
      });
        }
        });
   };

    scheduler._click.buttons.reserve_event = function(id){
        
            jQuery.ajax({
        type: "POST",
        dataType: 'json',
        data: "authenticity_token=" + csrf_token,
        url:  "../events/"+id+"/reserve_event",
        success: function(data) {
          scheduler.hideQuickInfo(true);
          scheduler.load("<%= data_path %>", "json");
        }.bind(this),
        error: function(error) {
            alert(error);
        }.bind(this),
        timeout: 30000
      });

    };

    scheduler._click.buttons.cancel = function(id){
        scheduler.hideQuickInfo(true); 
    };

    scheduler.attachEvent("onClick", function(id) {  
            scheduler.hideQuickInfo(true);
            this._show_tooltips = false;
            dhtmlXTooltip.hide();
            var objEvent = scheduler.getEvent(id);   
            if (objEvent.allowed === false) {
                scheduler.config.icons_select = ["icon_cancel"];
                dhtmlx.message({
                    title: "Not allowed",
                    type: "alert-warning",
                    text: "Your membership does not include this type of training. Please extend your membership, or contact support."
                });
            } else if (objEvent.past === true) {
                scheduler.config.icons_select = ["icon_cancel"];
                dhtmlx.message({
                    title: "Warning",
                    type: "alert-warning",
                    text: "You can't make reservations for past events."
                });
            } else if (objEvent.reserved === true) {
              scheduler.config.icons_select = ["icon_cancel_event","icon_cancel"];
            } else if (objEvent.full === true) {
                scheduler.config.icons_select = ["icon_cancel"];
                dhtmlx.message({
                    title: "Close",
                    type: "alert-warning",
                    text: "This termin is full. Please try again later."
                });
            } else {
              scheduler.config.icons_select = ["icon_reserve_event", "icon_cancel"];
            }
            scheduler.showQuickInfo(id);
            return true;
        }.bind(this)); 
    jQuery('.dhx_event_resize.dhx_footer').hide();
    scheduler.config.readonly_form = true;
    scheduler.config.drag_resize = 0;
    scheduler.config.readonly = true;
    <% end %>
     scheduler.init("scheduler_here");
       scheduler.load("<%= data_path %>", "json");
   

</script>
<!-- /.container -->
